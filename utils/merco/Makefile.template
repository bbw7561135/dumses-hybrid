#===============================================================================
# This Makefile was automatically generated by ./configure
#===============================================================================
# Echo variables for fancy outputs
#===============================================================================
bold  = $(shell tput bold)
reset = $(shell tput sgr0)

# Preprocessor variables
#===============================================================================
NDIM  = %(ndim)s
MPI   = %(mpi)s
PNCDF = %(pncdf)s
HDF5  = %(hdf5)s
PHDF5 = %(phdf5)s
INTER = %(inter)s

# WARNING: do not modify Makefile behind this point; all modifications will be
# done at your own risk.
#===============================================================================
# Compiler and flags
#===============================================================================
F90      = %(fccompiler)s
FFLAGS   = %(fflags)s
CPPFLAGS = %(cppflags)s
PHYFLAGS = %(phyflags)s
MODFLAGS = %(modflags)s
ifeq ($(MPI),1)
MPIINC   = %(mpiinc)s
MPILIB   = %(mpilib)s
endif  
ifeq ($(HDF5),1)
HDFINC   = -I%(hdfdir)s/include/
HDFLIB   = -L%(hdfdir)s/lib -lhdf5_fortran -lhdf5 -lz
endif
ifeq ($(PHDF5),1)
HDFINC   = -I%(hdfdir)s/include/
HDFLIB   = -L%(hdfdir)s/lib -lhdf5_fortran -lhdf5 -lz
endif
ifeq ($(PNCDF),1)
CDFINC   = -I%(cdfdir)s/include/
CDFLIB   = -L%(cdfdir)s/lib -lpnetcdf
endif
LIBFLAGS = $(MPIINC) $(HDFINC) $(CDFINC) -I$(BINDIR)
FLAGS    = $(FFLAGS) $(PHYFLAGS)
ALLFLAGS = $(LIBFLAGS) $(CPPFLAGS) $(FLAGS)
ALLLIBS  = $(MPILIB) $(HDFLIB) $(CDFLIB)
BINOBJ   = $(addprefix $(BINDIR)/, $(sort $(notdir $(ALLOBJ))))

# Sources, modules and binaries directories
#===============================================================================
SRCDIR   = src
MODDIR   = $(SRCDIR)/modules
SUBDIR   = $(SRCDIR)/subroutines
BINDIR   = bin
BINDIRMO = ../../$(BINDIR)
BINDIRSU = ../../$(BINDIR)
BINDIRSR = ../$(BINDIR)
VPATH    = $(SRCDIR):$(MODDIR)
MODSRC   = $(wildcard $(MODDIR)/*f90)
MODOBJ   = $(join $(addsuffix $(BINDIRMO)/, $(dir $(MODSRC))), $(notdir $(MODSRC:.f90=.o)))
SUBSRC   = $(wildcard $(SUBDIR)/*f90)
SUBOBJ   = $(join $(addsuffix $(BINDIRSU)/, $(dir $(SUBSRC))), $(notdir $(SUBSRC:.f90=.o)))
MAINSRC  = $(wildcard $(SRCDIR)/*f90)
MAINOBJ  = $(join $(addsuffix $(BINDIRSR)/, $(dir $(MAINSRC))), $(notdir $(MAINSRC:.f90=.o)))
ALLOBJ   = $(MODOBJ) $(SUBOBJ) $(MAINOBJ)

# Compilation rules
#== all: compile main program ==================================================
all: merco
#== Modules ====================================================================
$(MODDIR)/$(BINDIRMO)/%%.o: $(MODDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling modules$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@ $(MODFLAGS)
#== Subroutines ================================================================
$(SUBDIR)/$(BINDIRSU)/%%.o: $(SUBDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling subroutines$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
#== Main sources ===============================================================
$(SRCDIR)/$(BINDIRSR)/%%.o: $(SRCDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling main sources...$(reset)"
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
#== Main program ===============================================================
merco: $(ALLOBJ)
%(tab)s@echo "> $(bold)Compiling main program...$(reset)"
%(tab)s$(F90) $(FLAGS) -o ./bin/merco $(BINOBJ) $(ALLLIBS)
%(tab)s@echo "> $(bold)Compilation successful!$(reset)"
#== Cleaning rules =============================================================
clean:
%(tab)s@echo "> $(bold)Cleaning bin/ directory...$(reset)"
%(tab)srm bin/*.o bin/*.mod 
#===============================================================================
