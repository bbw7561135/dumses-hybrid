#===============================================================================
# This Makefile was automatically generated by ./configure
#===============================================================================
# Echo variables for fancy outputs
#===============================================================================
bold  = $(shell tput bold)
reset = $(shell tput sgr0)

# Preprocessor variables
#===============================================================================
NDIM  = %(ndim)s
ISO   = %(iso)s
GEOM  = %(geom)s
MPI   = %(mpi)s
HDF5  = %(hdf5)s
PHDF5 = %(phdf5)s
PNCDF = %(pncdf)s
PGIFC = %(pgifc)s
OACC  = %(oacc)s

# Problem directory
#===============================================================================
PROBLEM = %(problem)s

# WARNING: do not modify Makefile behind this point; all modifications will be
# done at your own risk.
#===============================================================================
# Compiler and flags
#===============================================================================
F90      = %(fccompiler)s
FFLAGS   = %(fflags)s
CPPFLAGS = %(cppflags)s
MODFLAGS = %(modflags)s
PHYFLAGS = %(phyflags)s
ifeq ($(MPI),1)
MPIINC   = %(mpiinc)s
MPILIB   = %(mpilib)s
endif  
ifeq ($(HDF5),1)
HDFINC   = -I%(hdfdir)s/include/
HDFLIB   = -L%(hdfdir)s/lib -lhdf5_fortran -lhdf5 -lz
endif
ifeq ($(PHDF5),1)
HDFINC   = -I%(hdfdir)s/include/
HDFLIB   = -L%(hdfdir)s/lib -lhdf5_fortran -lhdf5 -lz -ldl
endif
ifeq ($(PNCDF),1)
CDFINC   = -I%(cdfdir)s/include/
CDFLIB   = -L%(cdfdir)s/lib -lpnetcdf
endif
LIBFLAGS = $(MPIINC) $(HDFINC) $(CDFINC) -I$(BINDIR)
FLAGS    = $(FFLAGS) $(PHYFLAGS)
ALLFLAGS = $(LIBFLAGS) $(CPPFLAGS) $(FLAGS)
ALLLIBS  = $(HDFLIB) $(CDFLIB) $(MPILIB)
BINOBJ   = $(addprefix $(BINDIR)/, $(sort $(notdir $(ALLOBJ))))

# Set the right flag for geometry
#===============================================================================
ifeq ($(GEOM), cartesian)
GEOM = 1
else
ifeq ($(GEOM), cylindrical)
GEOM = 2
else
ifeq ($(GEOM), spherical)
GEOM = 3
else
$(error "Unknown geometry option!")
endif
endif
endif

# Sources, modules and binaries directories
#===============================================================================
TMPDIR  = 
ifeq ("$(TMPDIR)", "")
SRCDIR  = src
PRBDIR  = $(PROBLEM)
else
SRCDIR  = $(TMPDIR)/src
PRBDIR  = $(TMPDIR)/$(PROBLEM)
endif
MODDIR  = $(SRCDIR)/modules
SMODDIR = $(shell ls -d $(MODDIR)/*/)
SUBDIR  = $(SRCDIR)/subroutines
USRDIR  = $(SRCDIR)/userfiles
ifeq ("$(wildcard $(PRBDIR)/modules)","")
PRMDIR  =
else
PRMDIR  = $(PRBDIR)/modules
endif
BINDIR  = bin
ifeq ("$(TMPDIR)", "")
SRCFROMBIN  = ../$(BINDIR)
MODFROMBIN  = ../../$(BINDIR)
SMODFROMBIN = ../../../$(BINDIR)
SUBFROMBIN  = ../../$(BINDIR)
USRFROMBIN  = ../../$(BINDIR)
PRBFROMBIN  = ../../../$(BINDIR)
ifneq ("$(PRMDIR)","")
PRMFROMBIN  = ../../../../$(BINDIR)
endif
else
SRCFROMBIN  = ../../$(BINDIR)
MODFROMBIN  = ../../../$(BINDIR)
SMODFROMBIN = ../../../../$(BINDIR)
SUBFROMBIN  = ../../../$(BINDIR)
USRFROMBIN  = ../../../$(BINDIR)
PRBFROMBIN  = ../../../../$(BINDIR)
ifneq ("$(PRMDIR)","")
PRMFROMBIN  = ../../../../../$(BINDIR)
endif
endif
VPATH     = $(SRCDIR):$(MODDIR):$(SUBDIR):$(PRBDIR)
MODFILES  = $(wildcard $(MODDIR)/*f90)
MODOBJ    = $(join $(addsuffix $(MODFROMBIN)/, $(dir $(MODFILES))), \
	  $(notdir $(MODFILES:.f90=.o)))
SMODFILES = $(wildcard $(SMODDIR)/*f90)
SMODOBJ   = $(join $(addsuffix $(SMODFROMBIN)/, $(dir $(SMODFILES))), \
	 $(notdir $(SMODFILES:.f90=.o)))
ifneq ("$(PRMDIR)","")
PRMFILES  = $(wildcard $(PRMDIR)/*f90)
PRMOBJ    = $(join $(addsuffix $(PRMFROMBIN)/, $(dir $(PRMFILES))), \
	  $(notdir $(PRMFILES:.f90=.o)))
endif
PRBFILES  = $(wildcard $(PRBDIR)/*f90)
PRBOBJ    = $(join $(addsuffix $(PRBFROMBIN)/, $(dir $(PRBFILES))), \
	  $(notdir $(PRBFILES:.f90=.o)))
SUBFILES  = $(wildcard $(SUBDIR)/*f90)
SUBOBJ    = $(join $(addsuffix $(SUBFROMBIN)/, $(dir $(SUBFILES))), \
	  $(notdir $(SUBFILES:.f90=.o)))
USRFILES  = $(wildcard $(USRDIR)/*f90)
USROBJ    = $(join $(addsuffix $(USRFROMBIN)/, $(dir $(USRFILES))), \
	  $(notdir $(USRFILES:.f90=.o)))
SRCFILES  = $(wildcard $(SRCDIR)/*f90)
SRCOBJ    = $(join $(addsuffix $(SRCFROMBIN)/, $(dir $(SRCFILES))), \
	  $(notdir $(SRCFILES:.f90=.o)))
ALLOBJ    = $(MODOBJ) $(SMODOBJ) $(PRMOBJ) $(PRBOBJ) $(SUBOBJ) $(USROBJ) $(SRCOBJ)

# Compilation rules
#== all: compile main program ==================================================
all: dumses
#== Modules ====================================================================
$(MODDIR)/$(MODFROMBIN)/%%.o: $(MODDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling modules$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@ $(MODFLAGS)
$(SMODDIR)/$(SMODFROMBIN)/%%.o: $(SMODDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling submodules$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@ $(MODFLAGS)
$(PRMDIR)/$(PRMFROMBIN)/%%.o: $(PRMDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling problem modules$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@ $(MODFLAGS)
#== Problem subroutines ========================================================
$(PRBDIR)/$(PRBFROMBIN)/%%.o: $(PRBDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling problem subroutines$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
#== Subroutines ================================================================
$(SUBDIR)/$(SUBFROMBIN)/%%.o: $(SUBDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling subroutines$(reset): "$@
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
$(USRDIR)/$(USRFROMBIN)/%%.o: $(USRDIR)/%%.f90
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
#== Main sources ===============================================================
$(SRCDIR)/$(SRCFROMBIN)/%%.o: $(SRCDIR)/%%.f90
%(tab)s@echo "> $(bold)Compiling main sources...$(reset)"
%(tab)s$(F90) $(ALLFLAGS) -c $^ -o $@
#== Main program ===============================================================
dumses: $(ALLOBJ)
%(tab)s@echo "> $(bold)Compiling main program...$(reset)"
%(tab)s$(F90) $(FLAGS) -o ./bin/dumses $(BINOBJ) $(ALLLIBS)
%(tab)s@echo "> $(bold)Compilation successful!$(reset)"
%(tab)s@echo " "
%(tab)s@echo "> $(bold)Please copy in your run directory the following files$(reset): "
%(tab)s@echo "   - "$(PROBLEM)"/input"
%(tab)s@echo "   - "$(BINDIR)"/dumses"
#== Cleaning rules =============================================================
clean:
%(tab)s@echo "> $(bold)Cleaning bin/ and tmp/ directories...$(reset)"
%(tab)srm -rf tmp/*
%(tab)srm bin/*.o bin/*.mod 
shallow_clean:
%(tab)s@echo "> $(bold)Cleaning bin/ directory...$(reset)"
%(tab)srm bin/*.o bin/*.mod 
#===============================================================================
